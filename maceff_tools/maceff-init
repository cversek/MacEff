#!/usr/bin/env bash
set -euo pipefail

# maceff-init: Initialize .maceff/ structure for MacEff development
# Creates framework/ (runtime content) and config/ (build-time settings)

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
MACEFF_DIR="$REPO_ROOT/.maceff"

# Detect submodule context: Are we being called from a parent repo that contains MacEff as submodule?
MACEFF_SOURCE="$REPO_ROOT"  # Default: assume running from MacEff repo itself
if [[ -d "$REPO_ROOT/MacEff/policies" ]] && [[ -d "$REPO_ROOT/MacEff/templates" ]]; then
    # We're in a parent repo with MacEff as submodule
    MACEFF_SOURCE="$REPO_ROOT/MacEff"
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[maceff-init]${NC} $*"
}

warn() {
    echo -e "${YELLOW}[maceff-init]${NC} $*"
}

error() {
    echo -e "${RED}[maceff-init ERROR]${NC} $*" >&2
}

# Check if .maceff/ already exists
if [[ -d "$MACEFF_DIR" ]]; then
    warn "Directory .maceff/ already exists!"
    echo ""
    echo "Options:"
    echo "  1) Backup existing and create fresh (recommended)"
    echo "  2) Exit and manually inspect"
    echo ""
    read -p "Enter choice (1 or 2): " choice

    case "$choice" in
        1)
            BACKUP_DIR="${MACEFF_DIR}.backup-$(date +%Y%m%d-%H%M%S)"
            log "Backing up to: $BACKUP_DIR"
            mv "$MACEFF_DIR" "$BACKUP_DIR"
            ;;
        2)
            log "Exiting. Please inspect .maceff/ manually."
            exit 0
            ;;
        *)
            error "Invalid choice. Exiting."
            exit 1
            ;;
    esac
fi

# Create directory structure
log "Creating .maceff/ directory structure..."

mkdir -p "$MACEFF_DIR/framework/policies/sets"
mkdir -p "$MACEFF_DIR/framework/templates"
mkdir -p "$MACEFF_DIR/framework/agent_defs"
mkdir -p "$MACEFF_DIR/config/projects"

log "  ✓ Created framework/ directories"
log "  ✓ Created config/ directories"

# Copy version-controlled defaults
log "Copying version-controlled defaults..."
if [[ "$MACEFF_SOURCE" != "$REPO_ROOT" ]]; then
    log "  ℹ Detected submodule context: using MacEff/ submodule resources"
fi

# Policies
if [[ -d "$MACEFF_SOURCE/policies/base" ]]; then
    cp -r "$MACEFF_SOURCE/policies/base" "$MACEFF_DIR/framework/policies/sets/"
    log "  ✓ Copied policies/base/ → framework/policies/sets/base/"
else
    warn "  ! policies/base/ not found - skipping"
fi

# Templates
if [[ -d "$MACEFF_SOURCE/templates" ]]; then
    cp -r "$MACEFF_SOURCE/templates/"* "$MACEFF_DIR/framework/templates/" 2>/dev/null || true
    log "  ✓ Copied templates/ → framework/templates/"
else
    warn "  ! templates/ not found - skipping"
fi

# Agent definitions (optional)
if [[ -d "$MACEFF_SOURCE/agent_defs" ]]; then
    cp -r "$MACEFF_SOURCE/agent_defs/"* "$MACEFF_DIR/framework/agent_defs/" 2>/dev/null || true
    log "  ✓ Copied agent_defs/ → framework/agent_defs/"
else
    log "  ℹ agent_defs/ not found - skipping (optional)"
fi

# Parent repo overlay (only in submodule context)
if [[ "$MACEFF_SOURCE" != "$REPO_ROOT" ]] && [[ -d "$REPO_ROOT/framework" ]]; then
    log "Applying parent repo framework/ overlay..."

    # Copy parent framework resources, explicitly noting overwrites
    if [[ -f "$REPO_ROOT/framework/agents.yaml" ]]; then
        cp "$REPO_ROOT/framework/agents.yaml" "$MACEFF_DIR/framework/"
        warn "  ⚠ OVERLAY: agents.yaml (parent overrides submodule default)"
    fi

    if [[ -f "$REPO_ROOT/framework/projects.yaml" ]]; then
        cp "$REPO_ROOT/framework/projects.yaml" "$MACEFF_DIR/framework/"
        warn "  ⚠ OVERLAY: projects.yaml (parent overrides submodule default)"
    fi

    # Copy parent agent personalities
    if [[ -d "$REPO_ROOT/framework/agents" ]]; then
        mkdir -p "$MACEFF_DIR/framework/agents"
        cp -r "$REPO_ROOT/framework/agents/"* "$MACEFF_DIR/framework/agents/" 2>/dev/null || true
        warn "  ⚠ OVERLAY: agents/* (parent customizations added/override)"
    fi

    # Copy parent project contexts
    if [[ -d "$REPO_ROOT/framework/projects" ]]; then
        mkdir -p "$MACEFF_DIR/framework/projects"
        cp -r "$REPO_ROOT/framework/projects/"* "$MACEFF_DIR/framework/projects/" 2>/dev/null || true
        warn "  ⚠ OVERLAY: projects/* (parent customizations added/override)"
    fi

    log "  ✓ Parent overlay complete"
fi

# Create policies/current symlink
log "Creating policies/current symlink..."
if [[ -d "$MACEFF_DIR/framework/policies/sets/base" ]]; then
    (cd "$MACEFF_DIR/framework/policies" && ln -s sets/base current)
    log "  ✓ Created current → sets/base"
else
    warn "  ! base policy set not found - symlink not created"
fi

# Create config templates
log "Creating configuration templates..."

# global.env (minimal defaults)
cat > "$MACEFF_DIR/config/global.env" <<'EOF'
# MacEff Global Environment
# Variables here apply to ALL containers

# Timezone (defaults to America/New_York if not set)
MACEFF_TZ=America/New_York

# Default primary agent user
DEFAULT_PA=maceff_user001
EOF
log "  ✓ Created config/global.env"

# demo.env (project example)
cat > "$MACEFF_DIR/config/projects/demo.env" <<'EOF'
# MacEff Demo Project Environment
# Variables here apply only to demo project containers

# Project-specific settings
PROJ=demo
EOF
log "  ✓ Created config/projects/demo.env"

# config.json.example (agent configuration template)
cat > "$MACEFF_DIR/config/config.json.example" <<'EOF'
{
  "moniker": "YourAgentName",
  "agent_id": "your_agent_id",
  "session_id": "auto-detected",
  "agent_root": "auto-detected",
  "temp_root": "/tmp/macf"
}
EOF
log "  ✓ Created config/config.json.example"

# Create .gitkeep files to maintain structure
touch "$MACEFF_DIR/framework/.gitkeep"
touch "$MACEFF_DIR/config/.gitkeep"

# Create docker-compose.override.yml template (if not exists)
OVERRIDE_FILE="$REPO_ROOT/docker-compose.override.yml"
if [[ ! -f "$OVERRIDE_FILE" ]]; then
    log "Creating docker-compose.override.yml template..."
    cat > "$OVERRIDE_FILE" <<'EOF'
# Local Docker Compose Overrides
# This file is gitignored - customize for your development environment
#
# Docker Compose automatically merges this file with docker-compose.yml
# Use this for environment-specific volumes, ports, or configuration

services:
  maceff-sandbox:
    # Uncomment and customize as needed:
    # volumes:
    #   - "/host/path/to/data:/container/mount/point:ro"
    # ports:
    #   - "8080:8080"
EOF
    log "  ✓ Created docker-compose.override.yml template"
else
    log "  ℹ docker-compose.override.yml already exists - skipping"
fi

# Display success message
echo ""
echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${GREEN}✅ MacEff initialization complete${NC}"
echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""
echo -e "${BLUE}Framework content copied to:${NC} .maceff/framework/"
echo "  • Policies:  .maceff/framework/policies/sets/base/"
echo "  • Templates: .maceff/framework/templates/"
if [[ -d "$MACEFF_DIR/framework/agent_defs" ]] && [[ -n "$(ls -A "$MACEFF_DIR/framework/agent_defs" 2>/dev/null)" ]]; then
    echo "  • Agent Defs: .maceff/framework/agent_defs/"
fi
echo ""
echo -e "${BLUE}Configuration files created:${NC} .maceff/config/"
echo "  • global.env           - Environment variables for all containers"
echo "  • projects/demo.env    - Project-specific environment"
echo "  • config.json.example  - Agent configuration template"
echo ""
echo -e "${BLUE}Next steps:${NC}"
echo "  1. (Optional) Review and customize files in .maceff/config/"
echo "  2. Build container: ${GREEN}make build${NC}"
echo "  3. Start services:  ${GREEN}make up${NC}"
echo ""
echo -e "${BLUE}To customize policies/templates:${NC}"
echo "  • Edit files in .maceff/framework/"
echo "  • For running containers: ${GREEN}make framework-upgrade${NC}"
echo ""
echo -e "${BLUE}Architecture:${NC}"
echo "  • ${BLUE}framework/${NC} = Runtime content (mounted in dev, baked in deploy)"
echo "  • ${BLUE}config/${NC}    = Build-time settings (host-only)"
echo ""
echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
