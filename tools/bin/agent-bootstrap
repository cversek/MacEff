#!/usr/bin/env bash
set -euo pipefail

# agent-bootstrap - Automated MacEff agent creation
# Creates a fully configured agent in the MacEff container with zero manual intervention

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
CONTAINER="${CONTAINER_NAME:-maceff-sandbox}"
KEYS_DIR="./keys"

# Usage information
usage() {
    cat <<EOF
Usage: $0 <agent_name> [email] [description]

Creates a fully configured agent in the MacEff container.

Arguments:
  agent_name    Required. Agent username (e.g., maceff_manny)
  email         Optional. Agent email (default: <agent_name>@maceff.local)
  description   Optional. Agent description (default: "MacEff Primary Agent")

Examples:
  $0 maceff_test
  $0 maceff_manny "manny@example.com"
  $0 maceff_manny "manny@example.com" "Manny - NeuroFieldz Development PA"

Environment:
  CONTAINER_NAME    Override container name (default: maceff-sandbox)

EOF
    exit 1
}

# Status reporting functions
status() {
    echo -e "${BLUE}==>${NC} $1"
}

success() {
    echo -e "${GREEN}✅${NC} $1"
}

error() {
    echo -e "${RED}❌ ERROR:${NC} $1" >&2
}

warning() {
    echo -e "${YELLOW}⚠️  WARNING:${NC} $1"
}

# Validate inputs
if [ $# -lt 1 ]; then
    error "Missing required argument: agent_name"
    usage
fi

AGENT_NAME="$1"
AGENT_EMAIL="${2:-${AGENT_NAME}@maceff.local}"
AGENT_DESC="${3:-MacEff Primary Agent}"

# Validate agent name format
if [[ ! "$AGENT_NAME" =~ ^[a-z][a-z0-9_-]*$ ]]; then
    error "Invalid agent name format. Must start with lowercase letter and contain only lowercase letters, numbers, underscores, and hyphens."
    exit 1
fi

# Display configuration
status "Agent Bootstrap Configuration"
echo "  Agent Name:  $AGENT_NAME"
echo "  Email:       $AGENT_EMAIL"
echo "  Description: $AGENT_DESC"
echo "  Container:   $CONTAINER"
echo ""

# Check if container is running
status "Checking container status..."
if ! docker inspect -f '{{.State.Running}}' "$CONTAINER" >/dev/null 2>&1; then
    error "Container '$CONTAINER' is not running. Start it with: make up"
    exit 1
fi
success "Container is running"

# Check if user already exists
status "Checking if user already exists..."
if docker exec "$CONTAINER" id "$AGENT_NAME" >/dev/null 2>&1; then
    error "User '$AGENT_NAME' already exists in container"
    exit 1
fi
success "User does not exist (good)"

# Create keys directory if needed
if [ ! -d "$KEYS_DIR" ]; then
    status "Creating keys directory..."
    mkdir -p "$KEYS_DIR"
    success "Keys directory created"
fi

# Check if SSH key already exists
SSH_KEY_PATH="${KEYS_DIR}/maceff_${AGENT_NAME}"
if [ -f "$SSH_KEY_PATH" ]; then
    warning "SSH key already exists at $SSH_KEY_PATH"
    read -p "Overwrite existing key? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        error "Aborted by user"
        exit 1
    fi
    rm -f "${SSH_KEY_PATH}" "${SSH_KEY_PATH}.pub"
fi

echo ""
status "Starting agent bootstrap..."
echo ""

# Step 1: Create user
status "Step 1/8: Creating user in container..."
if docker exec -u 0 "$CONTAINER" useradd -m -s /bin/bash "$AGENT_NAME" 2>&1; then
    success "User created: $AGENT_NAME"
else
    error "Failed to create user"
    exit 1
fi

# Step 2: Create .claude directory
status "Step 2/8: Creating .claude directory..."
if docker exec -u 0 "$CONTAINER" bash -c "mkdir -p /home/${AGENT_NAME}/.claude && chown ${AGENT_NAME}:${AGENT_NAME} /home/${AGENT_NAME}/.claude" 2>&1; then
    success ".claude directory created"
else
    error "Failed to create .claude directory"
    exit 1
fi

# Step 3: Generate SSH key on host
status "Step 3/8: Generating SSH key pair..."
if ssh-keygen -t ed25519 -f "$SSH_KEY_PATH" -N "" -C "${AGENT_NAME}@maceff-sandbox" >/dev/null 2>&1; then
    success "SSH key generated: $SSH_KEY_PATH"
else
    error "Failed to generate SSH key"
    exit 1
fi

# Step 4: Deploy SSH key to container
status "Step 4/8: Deploying SSH key to container..."
SSH_PUB_KEY=$(cat "${SSH_KEY_PATH}.pub")
if docker exec -u 0 "$CONTAINER" bash -c "
    mkdir -p /home/${AGENT_NAME}/.ssh && \
    echo '${SSH_PUB_KEY}' > /home/${AGENT_NAME}/.ssh/authorized_keys && \
    chown -R ${AGENT_NAME}:${AGENT_NAME} /home/${AGENT_NAME}/.ssh && \
    chmod 700 /home/${AGENT_NAME}/.ssh && \
    chmod 600 /home/${AGENT_NAME}/.ssh/authorized_keys
" 2>&1; then
    success "SSH key deployed"
else
    error "Failed to deploy SSH key"
    exit 1
fi

# Step 5: Initialize config
status "Step 5/8: Initializing agent config..."
if docker exec -u "$AGENT_NAME" "$CONTAINER" bash -c "
    cd ~ && echo -e '${AGENT_NAME}\nprimary_agent\n${AGENT_DESC}' | macf_tools config init --force
" 2>&1; then
    success "Config initialized"
else
    error "Failed to initialize config"
    exit 1
fi

# Step 6: Initialize preamble
status "Step 6/8: Initializing agent preamble..."
if docker exec -u "$AGENT_NAME" "$CONTAINER" bash -c "
    cd ~/.claude && macf_tools agent init
" 2>&1; then
    success "Preamble initialized"
else
    error "Failed to initialize preamble"
    exit 1
fi

# Step 7: Install hooks
status "Step 7/8: Installing consciousness hooks..."
if docker exec -u "$AGENT_NAME" "$CONTAINER" bash -c "cd ~/.claude && macf_tools hooks install --local" 2>&1; then
    success "Hooks installed"
else
    error "Failed to install hooks"
    exit 1
fi

# Step 8: Verify setup
status "Step 8/8: Verifying agent setup..."
echo ""
if docker exec -u "$AGENT_NAME" "$CONTAINER" macf_tools env 2>&1; then
    echo ""
    success "Verification passed"
else
    error "Verification failed"
    exit 1
fi

# Final summary
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
success "Agent bootstrap complete!"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "Agent Details:"
echo "  Name:        $AGENT_NAME"
echo "  Email:       $AGENT_EMAIL"
echo "  Description: $AGENT_DESC"
echo ""
echo "SSH Connection:"
echo "  ${BLUE}ssh -i ${SSH_KEY_PATH} -p 3022 ${AGENT_NAME}@localhost${NC}"
echo ""
echo "Quick Test:"
echo "  ${BLUE}make ssh-pa${NC}  (if configured in Makefile)"
echo ""
echo "Next Steps:"
echo "  1. Connect via SSH (command above)"
echo "  2. Configure Claude Code with agent's identity"
echo "  3. Start development work"
echo ""
